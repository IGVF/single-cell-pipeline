import synapseclient
import synapseutils

syn = synapseclient.Synapse()
syn.login(silent=True)


def get_file_type_status_main_outputs(name):
    if name.endswith(".bam"):
        return "bam","raw","yes"
    elif name.endswith(".log.txt"):
        return "txt","raw","no"
    elif name.endswith(".tsv.gz"):
        return "tsv.gz","raw","yes"
    elif name.endswith(".tsv.gz.tbi"):
        return ".tbi","raw","yes"
    elif name.endswith(".onlist.txt.gz"):
        return "txt.gz","raw","no"
    elif name.endswith(".chromap.barcode.metadata.tsv"):
        return "tsv","raw","no"
    elif name.endswith(".snapatac2.barcode.metadata.tsv"):
        return "tsv","filtered","no"
    elif name.endswith(".csv"):
        return "csv","filtered","no"
    elif name.endswith(".html"):
        return "html","filtered","no"
    elif name.endswith(".cells_x_genes.total.h5ad"):
        return "h5ad","raw","yes"
    elif name.endswith(".h5ad"):
        return "h5ad","raw","no"
    elif name.endswith(".tar.gz"):
        return "tar.gz","raw","no"
    elif name.endswith(".tsv"):
        return "tsv","raw","no"
    elif name.endswith(".txt") and "rna.log" in name:
        return "txt","raw","no"
    elif name.endswith("seqspec.txt.gz"):
        return "txt.gz","processed","no"
    elif name.endswith(".yaml"):
        return "yaml","raw","no"
    return None, None


def get_data_type(name):
    if ".atac" in name:
        return "atac"
    elif ".rna" in name:
        return "rna"
    return "joint"


def get_description(name):
    if name.endswith(".tsv.gz"):
        # .atac.fragments.hg38.tsv.gz
        return "[Raw] Fragment file from Chromap"
    elif name.endswith(".tsv.gz.tbi"):
        # .atac.fragments.hg38.tsv.gz.tbi
        return "[Raw] Fragment file index from Chromap"
    elif name.endswith("atac.onlist.txt.gz"):
        # .atac.onlist.txt.gz
        return "Barcode onlist file generated by seqspec"
    elif name.endswith(".chromap.barcode.metadata.tsv"):
        # .atac.qc.hg38.chromap.barcode.metadata.tsv
        return "[Raw] Per barcode alignment statistics file from Chromap"
    elif name.endswith(".snapatac2.barcode.metadata.tsv"):
        # .atac.qc.hg38.snapatac2.barcode.metadata.tsv
        return "[Filtered] Per barcode statistics file from SnapATAC2"
    elif name.endswith(".csv") and "joint" in name:
        # .joint.barcode.metadata.hg38.csv
        return "[Filtered] Joint per barcode statistics file"
    elif name.endswith(".html"):
        # .html
        return "[Filtered] HTML summary report"
    elif name.endswith(".csv") and "joint" not in name:
        # .csv
        return "[Filtered] CSV summary report"
    elif name.endswith(".cells_x_genes.total.h5ad"):
        # .rna.align.kb.hg38.cells_x_genes.total.h5ad
        return "[Raw] Aggregated(Ambiguous+Spliced+Unspliced) count matrix in h5ad format"
    elif name.endswith(".count_matrix.h5ad"):
        # .rna.align.kb.hg38.count_matrix.h5ad
        return "[Raw] h5ad containing four separated count matrices: Spliced, Unspliced, Ambiguous, and Total"
    elif name.endswith(".mtx.tar.gz"):
        # .rna.align.kb.hg38.mtx.tar.gz
        return "[Raw] Tarball containing four separated count matrices in mtx format: Spliced, Unspliced, Ambiguous, and Total"
    elif name.endswith(".tar.gz") and "rna.align.kb" in name:
        # .rna.align.kb.hg38.tar.gz
        return "[Raw] Tarball containing all the logs and bus files generated from kb"
    elif name.endswith(".txt") and "rna.log" in name:
        # .rna.log.hg38.txt
        return "[Raw] Log file from kb"
    elif name.endswith("rna.onlist.txt.gz"):
        # .rna.onlist.txt.gz
        return "Barcode onlist file generated by seqspec"
    elif name.endswith(".log.txt") and "atac.align" in name:
        # .atac.align.k4.hg38.log.txt
        return "[Raw] Log file from aligner"
    elif name.endswith(".bam"):
        # .atac.align.k4.hg38.bam
        return "[Raw] Aligned bam file from Chromap"
    # .qc.rna.hg38.barcode.metadata.tsv	
    elif "qc" in name and "rna" in name:
        return "[Raw] Per barcode alignment statistics file"
    elif name.endswith(".yaml"):
        return "[Raw] seqspec file"
    elif name.endswith("_onlist_seqspec.txt.gz") and "atac" in name:
        return "[Processed] ATAC barcode onlist file generated by seqspec"
    elif name.endswith("_onlist_seqspec.txt.gz") and "rna" in name:
        return "[Processed] RNA barcode onlist file generated by seqspec"
    return None


def get_annotations(file_id):
    return syn.get_annotations(file_id)


def set_annotations(file_id, annotations):
    return syn.set_annotations(file_id, annotations)


def generate_annotations(file_type, status, data_type, description, main_output):
    return {
        "file_type": file_type,
        "status": status,
        "data_type": data_type,
        "file_description": description,
        "main_output": main_output,
    }


# walk through all the files in the folder and update the annotations
root_folder = "syn123"

for directory_path, directory_names, file_name in synapseutils.walk(
    syn=syn, synId=root_folder, includeTypes=["file"]
):
    for directory_name in directory_names:
        print(
            f"Directory ({directory_name[1]}): {directory_path[0]}/{directory_name[0]}"
        )
        for sub_directory_path, sub_directory_name, sub_file_name in synapseutils.walk(
            syn=syn, synId=directory_name[1], includeTypes=["file"]
        ):
            for sub_file in sub_file_name:
                print(
                    f"File ({sub_file[1]}): {sub_directory_path[0]}/{sub_file[0]}"
                )
                file_type, status, main_output = get_file_type_status_main_outputs(sub_file[0])
                data_type = get_data_type(sub_file[0])
                description = get_description(sub_file[0])
                dict_annotations = generate_annotations(file_type, status, data_type, description, main_output)
                #print(dict_annotations)
                remote_annotations = get_annotations(sub_file[1])
                #print(remote_annotations)
                syn_annotations = synapseclient.Annotations(remote_annotations.id, remote_annotations.etag, dict_annotations)
                remote_annotations = syn.set_annotations(syn_annotations)
                print(remote_annotations)
            break


print("Done updating annotations")
